diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h b/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h
index 53640dd56..2bd1639f5 100644
--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h
@@ -53,6 +53,8 @@ extern "C" {
 #define LED_2          NRF_GPIO_PIN_MAP(0,14)
 #define LED_3          NRF_GPIO_PIN_MAP(0,15)
 #define LED_4          NRF_GPIO_PIN_MAP(0,16)
+#define LED_START LED_1
+#define LED_STOP LED_4
 
 #define LEDS_ACTIVE_STATE 0
 
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h b/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h
index 3da528ac9..c69ec3787 100644
--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h
@@ -115,13 +115,7 @@ OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
         #define __PACKED           __attribute__((packed)) 
     #endif
 
-    #define GET_SP()                gcc_current_sp()
-
-    static inline unsigned int gcc_current_sp(void)
-    {
-        register unsigned sp __ASM("sp");
-        return sp;
-    }
+    #define GET_SP()                __builtin_frame_address(0)
 
 #elif defined   ( __TASKING__ )
 
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h b/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h
index ccd408c0a..0826438b9 100644
--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h
@@ -42,7 +42,8 @@
 
 #include "nrf.h"
 #include "nrf_peripherals.h"
-#include "nrf_assert.h"
+/* #include "nrf_assert.h" */
+#define ASSERT(...)
 #include <stdbool.h>
 #include <stdlib.h>
 
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s
index 668f3cd8c..0f9fd7507 100644
--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s
@@ -16,12 +16,12 @@
 ; 
 ; NOTICE: This file has been modified by Nordic Semiconductor ASA.
 
-                IF :DEF: __STARTUP_CONFIG
+#ifdef  __STARTUP_CONFIG
 #include "startup_config.h"
 #ifndef __STARTUP_CONFIG_STACK_ALIGNEMENT
 #define __STARTUP_CONFIG_STACK_ALIGNEMENT 3
 #endif
-                ENDIF
+#endif
 
                 IF :DEF: __STARTUP_CONFIG
 Stack_Size      EQU __STARTUP_CONFIG_STACK_SIZE
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s
index ac0493b69..8b49cbd94 100644
--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s
@@ -16,13 +16,12 @@
 ; 
 ; NOTICE: This file has been modified by Nordic Semiconductor ASA.
 
-                IF :DEF: __STARTUP_CONFIG
+#ifdef  __STARTUP_CONFIG
 #include "startup_config.h"
 #ifndef __STARTUP_CONFIG_STACK_ALIGNEMENT
 #define __STARTUP_CONFIG_STACK_ALIGNEMENT 3
 #endif
-                ENDIF
-
+#endif
                 IF :DEF: __STARTUP_CONFIG
 Stack_Size      EQU __STARTUP_CONFIG_STACK_SIZE
                 ELIF :DEF: __STACK_SIZE
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s
index ff9d60ded..cc1c82378 100644
--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s
@@ -16,13 +16,12 @@
 ; 
 ; NOTICE: This file has been modified by Nordic Semiconductor ASA.
 
-                IF :DEF: __STARTUP_CONFIG
+#ifdef  __STARTUP_CONFIG
 #include "startup_config.h"
 #ifndef __STARTUP_CONFIG_STACK_ALIGNEMENT
 #define __STARTUP_CONFIG_STACK_ALIGNEMENT 3
 #endif
-                ENDIF
-
+#endif
                 IF :DEF: __STARTUP_CONFIG
 Stack_Size      EQU __STARTUP_CONFIG_STACK_SIZE
                 ELIF :DEF: __STACK_SIZE
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf51.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf51.s
new file mode 100644
index 000000000..c35fd8734
--- /dev/null
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf51.s
@@ -0,0 +1,115 @@
+/*****************************************************************************
+ * Copyright (c) 2014 Rowley Associates Limited.                             *
+ *                                                                           *
+ * This file may be distributed under the terms of the License Agreement     *
+ * provided with this software.                                              *
+ *                                                                           *
+ * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE   *
+ * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
+ *****************************************************************************/
+
+.macro ISR_HANDLER name=
+  .section .vectors, "ax"
+  .word \name
+  .section .init, "ax"
+  .thumb_func
+  .weak \name
+\name:
+1: b 1b /* endless loop */
+.endm
+
+.macro ISR_RESERVED
+  .section .vectors, "ax"
+  .word 0
+.endm
+
+  .syntax unified
+  .global reset_handler
+
+  .section .vectors, "ax"
+  .code 16 
+  .global _vectors
+
+.macro DEFAULT_ISR_HANDLER name=
+  .thumb_func
+  .weak \name
+\name:
+1: b 1b /* endless loop */
+.endm
+
+_vectors:
+  .word __stack_end__
+  .word reset_handler
+ISR_HANDLER NMI_Handler
+ISR_HANDLER HardFault_Handler
+ISR_RESERVED // Populate if using MemManage (MPU)
+ISR_RESERVED // Populate if using Bus fault
+ISR_RESERVED // Populate if using Usage fault
+ISR_RESERVED
+ISR_RESERVED
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER SVC_Handler
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER PendSV_Handler
+ISR_HANDLER SysTick_Handler
+  // External interrupts start her 
+ISR_HANDLER POWER_CLOCK_IRQHandler
+ISR_HANDLER RADIO_IRQHandler
+ISR_HANDLER UART0_IRQHandler
+ISR_HANDLER SPI0_TWI0_IRQHandler
+ISR_HANDLER SPI1_TWI1_IRQHandler
+ISR_RESERVED
+ISR_HANDLER GPIOTE_IRQHandler
+ISR_HANDLER ADC_IRQHandler
+ISR_HANDLER TIMER0_IRQHandler
+ISR_HANDLER TIMER1_IRQHandler
+ISR_HANDLER TIMER2_IRQHandler
+ISR_HANDLER RTC0_IRQHandler
+ISR_HANDLER TEMP_IRQHandler
+ISR_HANDLER RNG_IRQHandler
+ISR_HANDLER ECB_IRQHandler
+ISR_HANDLER CCM_AAR_IRQHandler
+ISR_HANDLER WDT_IRQHandler
+ISR_HANDLER RTC1_IRQHandler
+ISR_HANDLER QDEC_IRQHandler
+ISR_HANDLER LPCOMP_IRQHandler
+ISR_HANDLER SWI0_IRQHandler
+ISR_HANDLER SWI1_IRQHandler
+ISR_HANDLER SWI2_IRQHandler
+ISR_HANDLER SWI3_IRQHandler
+ISR_HANDLER SWI4_IRQHandler
+ISR_HANDLER SWI5_IRQHandler
+
+
+  .section .vectors, "ax"
+_vectors_end:
+
+  .section .init, "ax"
+  .thumb_func
+
+  reset_handler:
+#ifndef __NO_SYSTEM_INIT
+  ldr r0, =__SRAM_segment_end__
+  mov sp, r0
+  bl SystemInit
+#endif
+
+#if !defined(__SOFTFP__)
+  // Enable CP11 and CP10 with CPACR |= (0xf<<20)
+  movw r0, 0xED88
+  movt r0, 0xE000
+  ldr r1, [r0]
+  orrs r1, r1, #(0xf << 20)
+  str r1, [r0]
+#endif
+
+  b _start
+
+#ifndef __NO_SYSTEM_INIT
+  .thumb_func
+  .weak SystemInit
+SystemInit:
+  bx lr
+#endif
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52.s
new file mode 100644
index 000000000..2b91a5880
--- /dev/null
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52.s
@@ -0,0 +1,127 @@
+/*****************************************************************************
+ * Copyright (c) 2014 Rowley Associates Limited.                             *
+ *                                                                           *
+ * This file may be distributed under the terms of the License Agreement     *
+ * provided with this software.                                              *
+ *                                                                           *
+ * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE   *
+ * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
+ *****************************************************************************/
+
+.macro ISR_HANDLER name=
+  .section .vectors, "ax"
+  .word \name
+  .section .init, "ax"
+  .thumb_func
+  .weak \name
+\name:
+1: b 1b /* endless loop */
+.endm
+
+.macro ISR_RESERVED
+  .section .vectors, "ax"
+  .word 0
+.endm
+
+  .syntax unified
+  .global reset_handler
+
+  .section .vectors, "ax"
+  .code 16 
+  .global _vectors
+
+.macro DEFAULT_ISR_HANDLER name=
+  .thumb_func
+  .weak \name
+\name:
+1: b 1b /* endless loop */
+.endm
+
+_vectors:
+  .word __stack_end__
+  .word reset_handler
+ISR_HANDLER NMI_Handler
+ISR_HANDLER HardFault_Handler
+ISR_RESERVED // Populate if using MemManage (MPU)
+ISR_RESERVED // Populate if using Bus fault
+ISR_RESERVED // Populate if using Usage fault
+ISR_RESERVED
+ISR_RESERVED
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER SVC_Handler
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER PendSV_Handler
+ISR_HANDLER SysTick_Handler
+  // External interrupts start her 
+ISR_HANDLER POWER_CLOCK_IRQHandler
+ISR_HANDLER RADIO_IRQHandler
+ISR_HANDLER UARTE0_UART0_IRQHandler
+ISR_HANDLER SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
+ISR_HANDLER SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
+ISR_HANDLER NFCT_IRQHandler
+ISR_HANDLER GPIOTE_IRQHandler
+ISR_HANDLER SAADC_IRQHandler
+ISR_HANDLER TIMER0_IRQHandler
+ISR_HANDLER TIMER1_IRQHandler
+ISR_HANDLER TIMER2_IRQHandler
+ISR_HANDLER RTC0_IRQHandler
+ISR_HANDLER TEMP_IRQHandler
+ISR_HANDLER RNG_IRQHandler
+ISR_HANDLER ECB_IRQHandler
+ISR_HANDLER CCM_AAR_IRQHandler
+ISR_HANDLER WDT_IRQHandler
+ISR_HANDLER RTC1_IRQHandler
+ISR_HANDLER QDEC_IRQHandler
+ISR_HANDLER COMP_LPCOMP_IRQHandler
+ISR_HANDLER SWI0_EGU0_IRQHandler
+ISR_HANDLER SWI1_EGU1_IRQHandler
+ISR_HANDLER SWI2_EGU2_IRQHandler
+ISR_HANDLER SWI3_EGU3_IRQHandler
+ISR_HANDLER SWI4_EGU4_IRQHandler
+ISR_HANDLER SWI5_EGU5_IRQHandler
+ISR_HANDLER TIMER3_IRQHandler
+ISR_HANDLER TIMER4_IRQHandler
+ISR_HANDLER PWM0_IRQHandler
+ISR_HANDLER PDM_IRQHandler
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER MWU_IRQHandler
+ISR_HANDLER PWM1_IRQHandler
+ISR_HANDLER PWM2_IRQHandler
+ISR_HANDLER SPIM2_SPIS2_SPI2_IRQHandler
+ISR_HANDLER RTC2_IRQHandler
+ISR_HANDLER I2S_IRQHandler
+ISR_HANDLER FPU_IRQHandler
+
+  .section .vectors, "ax"
+_vectors_end:
+
+  .section .init, "ax"
+  .thumb_func
+
+  reset_handler:
+#ifndef __NO_SYSTEM_INIT
+  ldr r0, =__SRAM_segment_end__
+  mov sp, r0
+  bl SystemInit
+#endif
+
+#if !defined(__SOFTFP__)
+  // Enable CP11 and CP10 with CPACR |= (0xf<<20)
+  movw r0, 0xED88
+  movt r0, 0xE000
+  ldr r1, [r0]
+  orrs r1, r1, #(0xf << 20)
+  str r1, [r0]
+#endif
+
+  b _start
+
+#ifndef __NO_SYSTEM_INIT
+  .thumb_func
+  .weak SystemInit
+SystemInit:
+  bx lr
+#endif
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52840.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52840.s
new file mode 100644
index 000000000..2f8f7769f
--- /dev/null
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52840.s
@@ -0,0 +1,136 @@
+/*****************************************************************************
+ * Copyright (c) 2014 Rowley Associates Limited.                             *
+ *                                                                           *
+ * This file may be distributed under the terms of the License Agreement     *
+ * provided with this software.                                              *
+ *                                                                           *
+ * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE   *
+ * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
+ *****************************************************************************/
+
+.macro ISR_HANDLER name=
+  .section .vectors, "ax"
+  .word \name
+  .section .init, "ax"
+  .thumb_func
+  .weak \name
+\name:
+1: b 1b /* endless loop */
+.endm
+
+.macro ISR_RESERVED
+  .section .vectors, "ax"
+  .word 0
+.endm
+
+  .syntax unified
+  .global reset_handler
+
+  .section .vectors, "ax"
+  .code 16
+  .global _vectors
+
+.macro DEFAULT_ISR_HANDLER name=
+  .thumb_func
+  .weak \name
+\name:
+1: b 1b /* endless loop */
+.endm
+
+_vectors:
+  .word __stack_end__
+  .word reset_handler
+ISR_HANDLER NMI_Handler
+ISR_HANDLER HardFault_Handler
+ISR_RESERVED // Populate if using MemManage (MPU)
+ISR_RESERVED // Populate if using Bus fault
+ISR_RESERVED // Populate if using Usage fault
+ISR_RESERVED
+ISR_RESERVED
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER SVC_Handler
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER PendSV_Handler
+ISR_HANDLER SysTick_Handler
+  // External interrupts start her
+ISR_HANDLER POWER_CLOCK_IRQHandler
+ISR_HANDLER RADIO_IRQHandler
+ISR_HANDLER UARTE0_UART0_IRQHandler
+ISR_HANDLER SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
+ISR_HANDLER SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
+ISR_HANDLER NFCT_IRQHandler
+ISR_HANDLER GPIOTE_IRQHandler
+ISR_HANDLER SAADC_IRQHandler
+ISR_HANDLER TIMER0_IRQHandler
+ISR_HANDLER TIMER1_IRQHandler
+ISR_HANDLER TIMER2_IRQHandler
+ISR_HANDLER RTC0_IRQHandler
+ISR_HANDLER TEMP_IRQHandler
+ISR_HANDLER RNG_IRQHandler
+ISR_HANDLER ECB_IRQHandler
+ISR_HANDLER CCM_AAR_IRQHandler
+ISR_HANDLER WDT_IRQHandler
+ISR_HANDLER RTC1_IRQHandler
+ISR_HANDLER QDEC_IRQHandler
+ISR_HANDLER COMP_LPCOMP_IRQHandler
+ISR_HANDLER SWI0_EGU0_IRQHandler
+ISR_HANDLER SWI1_EGU1_IRQHandler
+ISR_HANDLER SWI2_EGU2_IRQHandler
+ISR_HANDLER SWI3_EGU3_IRQHandler
+ISR_HANDLER SWI4_EGU4_IRQHandler
+ISR_HANDLER SWI5_EGU5_IRQHandler
+ISR_HANDLER TIMER3_IRQHandler
+ISR_HANDLER TIMER4_IRQHandler
+ISR_HANDLER PWM0_IRQHandler
+ISR_HANDLER PDM_IRQHandler
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER MWU_IRQHandler
+ISR_HANDLER PWM1_IRQHandler
+ISR_HANDLER PWM2_IRQHandler
+ISR_HANDLER SPIM2_SPIS2_SPI2_IRQHandler
+ISR_HANDLER RTC2_IRQHandler
+ISR_HANDLER I2S_IRQHandler
+ISR_HANDLER FPU_IRQHandler
+ISR_HANDLER USBD_IRQHandler
+ISR_HANDLER UARTE1_IRQHandler
+ISR_HANDLER QSPI_IRQHandler
+ISR_HANDLER CRYPTOCELL_IRQHandler
+ISR_RESERVED
+ISR_RESERVED
+ISR_HANDLER PWM3_IRQHandler
+ISR_RESERVED
+ISR_HANDLER SPIM3_IRQHandler
+
+  .section .vectors, "ax"
+_vectors_end:
+
+  .section .init, "ax"
+  .thumb_func
+
+  reset_handler:
+#ifndef __NO_SYSTEM_INIT
+  ldr r0, =__SRAM_segment_end__
+  mov sp, r0
+  bl SystemInit
+#endif
+
+#if !defined(__SOFTFP__)
+  // Enable CP11 and CP10 with CPACR |= (0xf<<20)
+  movw r0, 0xED88
+  movt r0, 0xE000
+  ldr r1, [r0]
+  orrs r1, r1, #(0xf << 20)
+  str r1, [r0]
+#endif
+
+  b _start
+
+#ifndef __NO_SYSTEM_INIT
+  .thumb_func
+  .weak SystemInit
+SystemInit:
+  bx lr
+#endif
diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/nRF5_SDK_14.0.0_3bcc1f7.patch b/external/nRF5_SDK_14.0.0_3bcc1f7/nRF5_SDK_14.0.0_3bcc1f7.patch
new file mode 100644
index 000000000..a56f3cb2f
--- /dev/null
+++ b/external/nRF5_SDK_14.0.0_3bcc1f7/nRF5_SDK_14.0.0_3bcc1f7.patch
@@ -0,0 +1,374 @@
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h b/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h
+index 53640dd56..2bd1639f5 100644
+--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/boards/pca10056.h
+@@ -53,6 +53,8 @@ extern "C" {
+ #define LED_2          NRF_GPIO_PIN_MAP(0,14)
+ #define LED_3          NRF_GPIO_PIN_MAP(0,15)
+ #define LED_4          NRF_GPIO_PIN_MAP(0,16)
++#define LED_START LED_1
++#define LED_STOP LED_4
+ 
+ #define LEDS_ACTIVE_STATE 0
+ 
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h b/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h
+index 3da528ac9..c69ec3787 100644
+--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/device/compiler_abstraction.h
+@@ -115,13 +115,7 @@ OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+         #define __PACKED           __attribute__((packed)) 
+     #endif
+ 
+-    #define GET_SP()                gcc_current_sp()
+-
+-    static inline unsigned int gcc_current_sp(void)
+-    {
+-        register unsigned sp __ASM("sp");
+-        return sp;
+-    }
++    #define GET_SP()                __builtin_frame_address(0)
+ 
+ #elif defined   ( __TASKING__ )
+ 
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h b/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h
+index ccd408c0a..0826438b9 100644
+--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf/hal/nrf_gpio.h
+@@ -42,7 +42,8 @@
+ 
+ #include "nrf.h"
+ #include "nrf_peripherals.h"
+-#include "nrf_assert.h"
++/* #include "nrf_assert.h" */
++#define ASSERT(...)
+ #include <stdbool.h>
+ #include <stdlib.h>
+ 
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s
+index 668f3cd8c..0f9fd7507 100644
+--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf51.s
+@@ -16,12 +16,12 @@
+ ; 
+ ; NOTICE: This file has been modified by Nordic Semiconductor ASA.
+ 
+-                IF :DEF: __STARTUP_CONFIG
++#ifdef  __STARTUP_CONFIG
+ #include "startup_config.h"
+ #ifndef __STARTUP_CONFIG_STACK_ALIGNEMENT
+ #define __STARTUP_CONFIG_STACK_ALIGNEMENT 3
+ #endif
+-                ENDIF
++#endif
+ 
+                 IF :DEF: __STARTUP_CONFIG
+ Stack_Size      EQU __STARTUP_CONFIG_STACK_SIZE
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s
+index ac0493b69..8b49cbd94 100644
+--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52.s
+@@ -16,13 +16,12 @@
+ ; 
+ ; NOTICE: This file has been modified by Nordic Semiconductor ASA.
+ 
+-                IF :DEF: __STARTUP_CONFIG
++#ifdef  __STARTUP_CONFIG
+ #include "startup_config.h"
+ #ifndef __STARTUP_CONFIG_STACK_ALIGNEMENT
+ #define __STARTUP_CONFIG_STACK_ALIGNEMENT 3
+ #endif
+-                ENDIF
+-
++#endif
+                 IF :DEF: __STARTUP_CONFIG
+ Stack_Size      EQU __STARTUP_CONFIG_STACK_SIZE
+                 ELIF :DEF: __STACK_SIZE
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s
+index ff9d60ded..cc1c82378 100644
+--- a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/arm/arm_startup_nrf52840.s
+@@ -16,13 +16,12 @@
+ ; 
+ ; NOTICE: This file has been modified by Nordic Semiconductor ASA.
+ 
+-                IF :DEF: __STARTUP_CONFIG
++#ifdef  __STARTUP_CONFIG
+ #include "startup_config.h"
+ #ifndef __STARTUP_CONFIG_STACK_ALIGNEMENT
+ #define __STARTUP_CONFIG_STACK_ALIGNEMENT 3
+ #endif
+-                ENDIF
+-
++#endif
+                 IF :DEF: __STARTUP_CONFIG
+ Stack_Size      EQU __STARTUP_CONFIG_STACK_SIZE
+                 ELIF :DEF: __STACK_SIZE
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf51.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf51.s
+new file mode 100644
+index 000000000..c35fd8734
+--- /dev/null
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf51.s
+@@ -0,0 +1,115 @@
++/*****************************************************************************
++ * Copyright (c) 2014 Rowley Associates Limited.                             *
++ *                                                                           *
++ * This file may be distributed under the terms of the License Agreement     *
++ * provided with this software.                                              *
++ *                                                                           *
++ * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE   *
++ * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
++ *****************************************************************************/
++
++.macro ISR_HANDLER name=
++  .section .vectors, "ax"
++  .word \name
++  .section .init, "ax"
++  .thumb_func
++  .weak \name
++\name:
++1: b 1b /* endless loop */
++.endm
++
++.macro ISR_RESERVED
++  .section .vectors, "ax"
++  .word 0
++.endm
++
++  .syntax unified
++  .global reset_handler
++
++  .section .vectors, "ax"
++  .code 16 
++  .global _vectors
++
++.macro DEFAULT_ISR_HANDLER name=
++  .thumb_func
++  .weak \name
++\name:
++1: b 1b /* endless loop */
++.endm
++
++_vectors:
++  .word __stack_end__
++  .word reset_handler
++ISR_HANDLER NMI_Handler
++ISR_HANDLER HardFault_Handler
++ISR_RESERVED // Populate if using MemManage (MPU)
++ISR_RESERVED // Populate if using Bus fault
++ISR_RESERVED // Populate if using Usage fault
++ISR_RESERVED
++ISR_RESERVED
++ISR_RESERVED
++ISR_RESERVED
++ISR_HANDLER SVC_Handler
++ISR_RESERVED
++ISR_RESERVED
++ISR_HANDLER PendSV_Handler
++ISR_HANDLER SysTick_Handler
++  // External interrupts start her 
++ISR_HANDLER POWER_CLOCK_IRQHandler
++ISR_HANDLER RADIO_IRQHandler
++ISR_HANDLER UART0_IRQHandler
++ISR_HANDLER SPI0_TWI0_IRQHandler
++ISR_HANDLER SPI1_TWI1_IRQHandler
++ISR_RESERVED
++ISR_HANDLER GPIOTE_IRQHandler
++ISR_HANDLER ADC_IRQHandler
++ISR_HANDLER TIMER0_IRQHandler
++ISR_HANDLER TIMER1_IRQHandler
++ISR_HANDLER TIMER2_IRQHandler
++ISR_HANDLER RTC0_IRQHandler
++ISR_HANDLER TEMP_IRQHandler
++ISR_HANDLER RNG_IRQHandler
++ISR_HANDLER ECB_IRQHandler
++ISR_HANDLER CCM_AAR_IRQHandler
++ISR_HANDLER WDT_IRQHandler
++ISR_HANDLER RTC1_IRQHandler
++ISR_HANDLER QDEC_IRQHandler
++ISR_HANDLER LPCOMP_IRQHandler
++ISR_HANDLER SWI0_IRQHandler
++ISR_HANDLER SWI1_IRQHandler
++ISR_HANDLER SWI2_IRQHandler
++ISR_HANDLER SWI3_IRQHandler
++ISR_HANDLER SWI4_IRQHandler
++ISR_HANDLER SWI5_IRQHandler
++
++
++  .section .vectors, "ax"
++_vectors_end:
++
++  .section .init, "ax"
++  .thumb_func
++
++  reset_handler:
++#ifndef __NO_SYSTEM_INIT
++  ldr r0, =__SRAM_segment_end__
++  mov sp, r0
++  bl SystemInit
++#endif
++
++#if !defined(__SOFTFP__)
++  // Enable CP11 and CP10 with CPACR |= (0xf<<20)
++  movw r0, 0xED88
++  movt r0, 0xE000
++  ldr r1, [r0]
++  orrs r1, r1, #(0xf << 20)
++  str r1, [r0]
++#endif
++
++  b _start
++
++#ifndef __NO_SYSTEM_INIT
++  .thumb_func
++  .weak SystemInit
++SystemInit:
++  bx lr
++#endif
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52.s
+new file mode 100644
+index 000000000..2b91a5880
+--- /dev/null
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52.s
+@@ -0,0 +1,127 @@
++/*****************************************************************************
++ * Copyright (c) 2014 Rowley Associates Limited.                             *
++ *                                                                           *
++ * This file may be distributed under the terms of the License Agreement     *
++ * provided with this software.                                              *
++ *                                                                           *
++ * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE   *
++ * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
++ *****************************************************************************/
++
++.macro ISR_HANDLER name=
++  .section .vectors, "ax"
++  .word \name
++  .section .init, "ax"
++  .thumb_func
++  .weak \name
++\name:
++1: b 1b /* endless loop */
++.endm
++
++.macro ISR_RESERVED
++  .section .vectors, "ax"
++  .word 0
++.endm
++
++  .syntax unified
++  .global reset_handler
++
++  .section .vectors, "ax"
++  .code 16 
++  .global _vectors
++
++.macro DEFAULT_ISR_HANDLER name=
++  .thumb_func
++  .weak \name
++\name:
++1: b 1b /* endless loop */
++.endm
++
++_vectors:
++  .word __stack_end__
++  .word reset_handler
++ISR_HANDLER NMI_Handler
++ISR_HANDLER HardFault_Handler
++ISR_RESERVED // Populate if using MemManage (MPU)
++ISR_RESERVED // Populate if using Bus fault
++ISR_RESERVED // Populate if using Usage fault
++ISR_RESERVED
++ISR_RESERVED
++ISR_RESERVED
++ISR_RESERVED
++ISR_HANDLER SVC_Handler
++ISR_RESERVED
++ISR_RESERVED
++ISR_HANDLER PendSV_Handler
++ISR_HANDLER SysTick_Handler
++  // External interrupts start her 
++ISR_HANDLER POWER_CLOCK_IRQHandler
++ISR_HANDLER RADIO_IRQHandler
++ISR_HANDLER UARTE0_UART0_IRQHandler
++ISR_HANDLER SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
++ISR_HANDLER SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
++ISR_HANDLER NFCT_IRQHandler
++ISR_HANDLER GPIOTE_IRQHandler
++ISR_HANDLER SAADC_IRQHandler
++ISR_HANDLER TIMER0_IRQHandler
++ISR_HANDLER TIMER1_IRQHandler
++ISR_HANDLER TIMER2_IRQHandler
++ISR_HANDLER RTC0_IRQHandler
++ISR_HANDLER TEMP_IRQHandler
++ISR_HANDLER RNG_IRQHandler
++ISR_HANDLER ECB_IRQHandler
++ISR_HANDLER CCM_AAR_IRQHandler
++ISR_HANDLER WDT_IRQHandler
++ISR_HANDLER RTC1_IRQHandler
++ISR_HANDLER QDEC_IRQHandler
++ISR_HANDLER COMP_LPCOMP_IRQHandler
++ISR_HANDLER SWI0_EGU0_IRQHandler
++ISR_HANDLER SWI1_EGU1_IRQHandler
++ISR_HANDLER SWI2_EGU2_IRQHandler
++ISR_HANDLER SWI3_EGU3_IRQHandler
++ISR_HANDLER SWI4_EGU4_IRQHandler
++ISR_HANDLER SWI5_EGU5_IRQHandler
++ISR_HANDLER TIMER3_IRQHandler
++ISR_HANDLER TIMER4_IRQHandler
++ISR_HANDLER PWM0_IRQHandler
++ISR_HANDLER PDM_IRQHandler
++ISR_RESERVED
++ISR_RESERVED
++ISR_HANDLER MWU_IRQHandler
++ISR_HANDLER PWM1_IRQHandler
++ISR_HANDLER PWM2_IRQHandler
++ISR_HANDLER SPIM2_SPIS2_SPI2_IRQHandler
++ISR_HANDLER RTC2_IRQHandler
++ISR_HANDLER I2S_IRQHandler
++ISR_HANDLER FPU_IRQHandler
++
++  .section .vectors, "ax"
++_vectors_end:
++
++  .section .init, "ax"
++  .thumb_func
++
++  reset_handler:
++#ifndef __NO_SYSTEM_INIT
++  ldr r0, =__SRAM_segment_end__
++  mov sp, r0
++  bl SystemInit
++#endif
++
++#if !defined(__SOFTFP__)
++  // Enable CP11 and CP10 with CPACR |= (0xf<<20)
++  movw r0, 0xED88
++  movt r0, 0xE000
++  ldr r1, [r0]
++  orrs r1, r1, #(0xf << 20)
++  str r1, [r0]
++#endif
++
++  b _start
++
++#ifndef __NO_SYSTEM_INIT
++  .thumb_func
++  .weak SystemInit
++SystemInit:
++  bx lr
++#endif
+diff --git a/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52840.s b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52840.s
+new file mode 100644
+index 000000000..2f8f7769f
+--- /dev/null
++++ b/external/nRF5_SDK_14.0.0_3bcc1f7/components/toolchain/ses/ses_startup_nrf52840.s
+@@ -0,0 +1,136 @@
++/*****************************************************************************
++ * Copyright (c) 2014 Rowley Associates Limited.                             *
++ *                                                                           *
++ * This file may be distributed under the terms of the License Agreement     *
++ * provided with this software.                                              *
++ *                                                                           *
++ * THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE   *
++ * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. *
++ 
\ No newline at end of file
