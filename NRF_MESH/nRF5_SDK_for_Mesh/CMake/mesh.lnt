// Lint configuration file suitable for the Mesh project stack code and unit tests
-i"C:\keil_v5\ARM\ARMCC\include"
-i"C:\keil_v5\ARM\Pack\NordicSemiconductor\nRF_ConfidentialDeviceFamilyPack\7.1.0\Device\Include"
-i"C:\keil_v5\ARM\Pack\ARM\CMSIS\4.1.0\CMSIS\Include"

// Relevant parts copied from Keil ARM Lint configuration file:
-hsb_3
-format=%(%f:%l: %t %n: %m%)
-width(0,10)                 // Don't break lines
-wlib(0)                     // no warnings, just syntax errors within library headers
-w2                          // no warnings, just syntax errors within library headers
-elib(652)                   // #define of symbol 'Symbol' declared previously
-elib(760)                   // Redundant macro 'Symbol' defined identically at Location
-elib(762)                   // Redundantly declared symbol 'Symbol'
-elib(451)                   // Repeated include. stdbool.h does not have a standard include guard
+rw(_gobble)                 // activate the _gobble keyword, causes _gobble token to be both ignored

-d__isr=_gobble              // defined to be a _gobble
-d__fiq=_gobble              // defined to be a _gobble
-d__task=_gobble             // defined to be a _gobble
-d__at=_gobble               // defined to be a _gobble
-d__arm=_gobble              // defined to be a _gobble
-d__thumb=_gobble            // defined to be a _gobble
-d__ram=_gobble              // defined to be a _gobble
-d__return_address()=_gobble // defined to be a _gobble
-d__svc()=                   // defined to be compiler extension
-d__nop()=                   // defined to be compiler extension
-d__wfi()=                   // defined to be compiler extension
-d__wfe()=                   // defined to be compiler extension
-d__dmb()=                   // defined to be compiler extension
-d__enable_irq()=            // defined to be compiler extension
-d__disable_irq()=1          // defined to be compiler extension
-d__sev()=                   // defined to be compiler extension
-d__asm=
-d__nop()=
-d__INTADDR__=
-d__attribute__(param)
-d__declspec(param)
-d__pure
-d__value_in_regs=void
-d__inline=
-d__align=
-d__arm__
-d__CC_ARM                   // We use armcc, so let lint pretend to be armcc as well
-d__ARMCC_VERSION=400677     // The arm libraries require armcc >= V4.0.677
++d__attribute()=
+d__attribute()=
+d__WEAK=
-d__FUNCTION__="null str"
-d__LINE__=999

// Strong bool handling
-d_Bool=unsigned
-strong(B,_Bool)
-dbool=_Bool
-dtrue=((bool)1)
-dfalse=((bool)0)
-d__bool_true_false_are_defined=1

+rw(_ignore_init)            // activate this keyword
+rw(__declspec)              // activate this MS keyword
-sp4                         // size of pointer is 4 bytes
-si4                         // size of integer is 4 bytes
-sl4                         // size of long is 4 bytes
-sll8                        // size of long long is 8 bytes
+fll                         // enable support for long long
-epuc                        // Treat "string literals" as unsigned char
+ppw(warning)                // set #warning as a valid preprocessor directive.
-A(C99)                      // Set Lint i C99-mode

-emacro(10,_ARMABI_PURE,__value_in_regs,uuid_packed_t)   // Expecting string "s"
-emacro(413,offsetof)        // Likely use of NULL pointer 'Symbol' in argument to operator 'String'
-emacro(545,offsetof)        // Suspicious use of &  [addressing an array member is OK!]
-emacro(506,CU_ASSERT)       // Constant value Boolean
-emacro(506,STATIC_ASSERT)
-emacro(506,MEM_POOL_TYPE)
-esym(665,CU_ASSERT_EQUAL)   // Unparenthesized parameter
-esym(666,CU_ASSERT_EQUAL)   // Expression with side effects passed to repeated parameter

-ecall(605,memcpy,memcmp,strlen)                         // Increase in pointer capability             [To compensate for lack of 'const' formal parameter]

-esym(10,__pure,_ARMABI_PURE,uuid_packed_t)
-esym(36,__sdiv32by16,__udiv32by16,__sdiv64by32)
-esym(534,memcpy,memmove,memset,strncat,strncpy)         // ignoring return value of function 'xxx'
-esym(534,printf,putchar,puts,scanf,sprintf,sscanf)
-esym(526, __NOP, __SEV, __WFE)                          // not defined
-esym(628, __NOP, __SEV, __WFE)                          // no argument information provided
-esym(452,m_*,M_*)                                       // typedef Symbol 'Symbol' redeclared (TypeDiff) conflicts with Location  [m_* symbols are module local by our naming rules]
-esym(833,m_*,M_*)                                       // Symbol 'Symbol' is typed differently (String) in another module, compare with Location
-esym(714,*_IRQHandler)                                  // Symbol not referenced
-esym(750, SOFTDEVICE_INFO_STRUCT_ADDRESS)               // Local macro not referenced (it is, but only in an __at() which isnt' parsed */

-elib(10,19,950)             // Non-ISO/ANSI reserved word or construct


// The following info messages are generated by the hundreds, and generally we consider them ignorable
// To make other, more essential, infos more visible in the output.lnt file, we by default turn these off.
// Turn them on locally if considered relevant.
-e46                         // The ARM compiler can well handle bit fields even of uint8_t

// Added since MBTLE started
-emacro(10,NRF_MESH_ASSERT)  // GET_PC(pc) macro in NRF_MESH_ASSERT
-esym(40, MOV)               // assembly code interpreted as define
-e641                        // Do not complain about enums implicitly casted to ints
-emacro(506,NRF_MESH_ASSERT) // Ignore constant argument. E.g.: NRF_MESH_ASSERT(false)
-emacro(522,NRF_MESH_ASSERT) // Highest operation a constant??
-e537                        // Repeated include file

-emacro(506, NRF_MESH_STATIC_ASSERT) // Arguments to the static assert should be constant boolean

// Ignores that should be taken care of by future tasks:
-e534                           // Ignore return value of function: MBTLE-1440
-e553                           // Undefined preprocessor variable should be reenabled: MBTLE-1438
-e666                           // Expression with side effects passed to repeated parameter: MBTLE-1443